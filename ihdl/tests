So, let's copypaste the whole hdl.js to firefoxes js-console (ctrl-shift-c -> console)


// Test the NOT gate
a = true
not(a) // false
a = false 
not(a)  // true
// Not gate works as should be

// Test xor and nand
a = b = false // tulisi olla false
nand( nand( a, nand( a, b ) ) , nand( b, nand( a, b ) )); // false

a = false
b = true
nand( nand( a, nand( a, b ) ) , nand( b, nand( a, b ) )); // true

a = true 
b = false
nand( nand( a, nand( a, b ) ) , nand( b, nand( a, b ) )); // true

a = b = true
nand( nand( a, nand( a, b ) ) , nand( b, nand( a, b ) )); // false
//  Ok, so nand and xor is working.

// next in line, AND
a=b=false
and(a,b)    false
a = false
b = true 
and( a,b)    false
a = true
b = false
and(a,b)     false
a = b = true
and (a,b)    true
// AND works


// OR 
a=b=false
or(a,b) //   false
a = false
b = true 
or( a,b)   // true
a = true
b = false
or(a,b)   //  true
a = b = true
or(a,b) //   true
// Or works

// Half-adder
a = b = false 
half_adder(a,b)   // 0+0 = false
global_flag_carry // false
a = false
b = true
half_adder(a,b)   // 0+1 = 1 = true
global_flag_carry // false
a = true
b = false
half_adder(a,b)   // 1+0 = 1 = true
global_flag_carry // false
a = b = true
half_adder(a,b)   // 1+1 = 10 = false
global_flag_carry  // true





// Full adder
a b c   out c
0 0 0    0  0 ok
0 1 0    1  0 ok
1 0 0    1  0 ok  
1 1 0    0  1 ok
0 0 1    1  0
0 1 1    0  1
1 0 1    0  1
1 1 1    1  1

a = b =  global_flag_carry = false
full_adder(a,b)  // false 
global_flag_carry // false
ok

a = false
b = true
global_flag_carry = false
full_adder(a,b)  // true 
global_flag_carry // false
ok

a = true
b = false
global_flag_carry = false
full_adder(a,b)  // true 
global_flag_carry // false

a = true
b = true
global_flag_carry = false
full_adder(a,b)    // false 
global_flag_carry  // true

0 0 1    1  0
0 1 1    0  1
1 0 1    0  1
1 1 1    1  1

a = false
b = false
global_flag_carry = true
full_adder(a,b)    // true 
global_flag_carry  // false


a = false
b = true
global_flag_carry = true
full_adder(a,b)    // false 
global_flag_carry  // true



a = true
b = false
global_flag_carry = true
full_adder(a,b)    // false 
global_flag_carry  // true


a = true
b = true
global_flag_carry = true
full_adder(a,b)    // true
global_flag_carry  // true

So, now we can add?
     1  1 1 
   1001 0101
+  0101 0101  
--------------
   1110 1010
   
global_flag_carry = false;
full_adder(1,1) // false
full_adder(0,0) // true
full_adder(1,1) // false
full_adder(0,0) // true

full_adder(1,1) // false
full_adder(0,0) // true
full_adder(0,1) // true
full_adder(1,0) // true

>> global_flag_carry  // true
true
>> global_flag_carry = false;
false
>> full_adder(1,1) // false
false
>> full_adder(0,0) // true
true
>> full_adder(1,1) // false
false
>> full_adder(0,0) // true
true
>> full_adder(1,1) // false
false
>> full_adder(0,0) // true
true
>> full_adder(0,1) // true
true
>> full_adder(1,0) // true
true

Awesome.
// Full adder works


// Test the eight bit full adder
   console.log(global_program_counter + "  0000 0001");
   global_program_counter =  eight_bit_full_adder(global_program_counter,[false,false,false,false, false,false,false,true]);   
   console.log(global_program_counter + "0000 0010");
   global_program_counter =  eight_bit_full_adder(global_program_counter,[false,false,false,false, false,false,true,false]);   

   console.log(global_program_counter + "  0000 0100");
   global_program_counter =  eight_bit_full_adder(global_program_counter,[false,false,false,false, false,true,false,false]);         
   console.log(global_program_counter + "0010 0000");
   global_program_counter =  eight_bit_full_adder(global_program_counter,[false,false,true,false,  false,false,false,false]);         

   console.log(global_program_counter + "  0100 0000");
   global_program_counter =  eight_bit_full_adder(global_program_counter,[false,true,false,false,  false,false,false,false]);         
   console.log(global_program_counter + "  1000 0000");
   global_program_counter =  eight_bit_full_adder(global_program_counter,[true,false,false,false,   false,false,false,false]);         
   
   console.log(global_program_counter + " Lopullinen");  
   // oh yeah, if someone is reading these, "Lopullinen" means just "Final"
   // as in final result = lopullinen ratkaisu

false,false,false,false, false,false,false,false      0000 0001
false,false,false,false, false,false,false,true       0000 0010
false,false,false,false, false,false,true,true        0000 0100
false,false,false,false, false,true,true,true         0010 0000
false,false,true ,false, false,true,true,true         0100 0000
false,true ,true ,false, false,true,true,true         1000 0000
true,true,true,false,false,true,true,true Lopullinen
11100111

0000 0001
0000 0010
0000 0100
0010 0000
0100 0000
1000 0000+
***********
1110 0111 ok



   console.log(global_program_counter + "  1111 1111");
   global_program_counter =  eight_bit_full_adder(global_program_counter,[true, true, true, true,  true, true, true, true]);         
   console.log(global_program_counter + "  0000 0001");
   global_program_counter =  eight_bit_full_adder(global_program_counter,[false,false,false,false,   false,false,false,true]);         
   console.log(global_program_counter + " Lopullinen");
false,false,false,false,false,false,false,false  1111 1111 index.html:22:4
true,true,true,true,true,true,true,true  0000 0001 index.html:24:4
true,true,true,true,true,true,true,false Lopullinen index.html:26:4 

Nooo!  FF + 01 = FE ?


   console.log(global_program_counter + " + FF");
   global_program_counter =  eight_bit_full_adder(global_program_counter,hex_F.concat(hex_F));         
   console.log(global_program_counter + " + 01");
   global_program_counter =  eight_bit_full_adder(global_program_counter,hex_0.concat(hex_1));         
   console.log(global_program_counter + " Lopullinen");   

false,false,false,false,false,false,false,false + FF index.html:44:4
true,true,true,true,true,true,true,true  1 index.html:46:4
true,true,true,true,true,true,true,false Lopullinen index.html:48:4

// yep, FF+01=FE, so my adder has bug.


full_adder(0,0)
true
full_adder(0,1)
true
full_adder(1,0)
true
full_adder(1,1)
false


( 1111 111 )
  1111 1111
  0000 0001 +
1 0000 0000

global_flag_carry = false;
console.log(full_adder(1,1));
console.log(full_adder(1,0));
console.log(full_adder(1,0));
console.log(full_adder(1,0));
console.log(full_adder(1,0));
console.log(full_adder(1,0));
console.log(full_adder(1,0));
console.log(full_adder(1,0));

// Ooooh, ok, 8 bit adder need's to clear carry to work properly... 
// It shouldn't do that, maby half adder for first?

false,false,false,false,false,false,false,false + FF index.html:42:4
true,true,true,true,true,true,true,true + 01 index.html:44:4
false,false,false,false,false,false,false,false <--- This should be 0000 0000 index.html:46:4

// Awesome! Now the test again...   
   console.log(global_program_counter + "  0000 0001");
   global_program_counter =  eight_bit_full_adder(global_program_counter,[false,false,false,false, false,false,false,true]);   
   console.log(global_program_counter + "0000 0010");
   global_program_counter =  eight_bit_full_adder(global_program_counter,[false,false,false,false, false,false,true,false]);   

   console.log(global_program_counter + "  0000 0100");
   global_program_counter =  eight_bit_full_adder(global_program_counter,[false,false,false,false, false,true,false,false]);         
   console.log(global_program_counter + "0010 0000");
   global_program_counter =  eight_bit_full_adder(global_program_counter,[false,false,true,false,  false,false,false,false]);         

   console.log(global_program_counter + "  0100 0000");
   global_program_counter =  eight_bit_full_adder(global_program_counter,[false,true,false,false,  false,false,false,false]);         
   console.log(global_program_counter + "  1000 0000");
   global_program_counter =  eight_bit_full_adder(global_program_counter,[true,false,false,false,   false,false,false,false]);         
   
   console.log(global_program_counter + " <-- should be 1110 0111");  
   

false,false,false,false,false,false,false,false    0000 0001 index.html:43:4
true,false,false,false,false,false,false,false     0000 0010 index.html:45:4
false,true,false,false,false,false,false,true      0000 0100 index.html:48:4
true,false,true,false,false,false,true,false       0010 0000 index.html:50:4
false,true,false,false,false,false,true,true       0100 0000 index.html:53:4
true,true,false,false,false,false,false,true       1000 0000 index.html:55:4
true,false,false,false,false,false,true,false Lopullinen index.html:58:4


/*
Found the bug at last! 

I have thought my bytes as   msb 6 5 4 3 2 1 lsb 
but I have used them on js as 0  1 2 3 4 5 6 7

On adders the direction is important, so I need to 
reverse the the orfer, but then I need to use .reverse() 
to fix that wrong order.

Now finally that bug is smashed.... For now.

So, ALU has now nop working, and addition is not yet tested.

*/

//
//  Removed 8-bit add-operation. Let's check....
//
global_program_counter
increment_program_counter()
global_program_counter // oh yea, I need to assign it back...

// how the ... did JS arrays work again..
var testi= { 1, 2,3,4}
var testi= [1, 2,3,4]
testi = [testi[0] , testi[1], testi[2], testi[3]]   // Array [ 1, 2, 3, 4 ]
function swap(a,b){ return [b,a] ; }
// in my mind this could work...
testi = [swap( testi[0], testi[1] ), testi[2], testi[3] ]
// oh ok, It makes 2-dimensional table.. Now it get's ugly
testi = [swap( testi[0], testi[1] )[0],
         swap( testi[0], testi[1] )[1], 
         testi[2]      , testi[3]      ] // it did work? Omg.
         
// Now this is wierd
pc     // 0000 0000
inc pc 
pc     // 0000 0001
inc pc
pc     // 0000 0001

a = [ 0, 1, 0, 1]   // 5 + 6 = 11 , +1 = 12 ok.
b = [ 0, 1, 1, 0]
four_bit_full_adder(a,b)
four_bit_full_adder(four_bit_full_adder(a,b),[0,0,0,1])

global_flag_carry = 0
four_bit_full_adder_with_carry(a,b)
global_flag_carry = 0
four_bit_full_adder_with_carry([1,0,1,1],[0,0,0,1])

// arithmetics do work, so bug is in assignment

// Ohh, I was not thinking..
four_bit_full_adder( [0,0,0,1] , [global_program_counter[4] , global_program_counter[5], global_program_counter[6] , global_program_counter[7]])[3];

// Now increment works, 0-> 1 -> 2 -> 3... f -> 10 AWESOME!
// and after x10 11
// So next edge case is 1F -> 20. Nope, 1f+1 = 0. 
global_program_counter = [ 0,0,0,1, 1,1,1,1]
increment_program_counter() // 0000 0000
// did the 1111 really become 10000
global_program_counter = [ 0,0,0,0, 1,1,1,1] // 1 0000, yes it did.

// So many stupid mistakes.
global_program_counter = [ 0,0,0,0, 1,1,1,1]
increment_program_counter()
global_program_counter = [ 0,0,0,1, 1,1,1,1]
global_program_counter = [ 0,0,1,1, 1,1,1,1]
global_program_counter = [ 0,1,1,1, 1,1,1,1]
global_program_counter = [ 1,1,1,1, 1,1,1,1]


or(
   and(
      full_adder(a[3] , b[3]), global_flag_add_with_carry
   )
   , // or
   and(
      half_adder(a[3] , b[3]), not(global_flag_add_with_carry)
   )
)
A=1 => full adder 
A=0 => not(A) =1 => half_adder


// Ok, back to ALU's add instruction.
// 5+6 = 11 , +1 = 12
alu_add([0,1,0,1] , [0,1,1,0]) // register_r0 = 1011 = 8+2+1 = 10+1 =11
alu_add([1,0,1,1] , [0,0,0,1]) // register_r0 Array [ true, true, false, false ]
global_flag_carry = 0
alu_add([0,0,0,1] , [1,1,1,1])

global_flag_carry = 0
0
alu_add([0,0,0,1] , [1,1,1,1])
undefined
register_r0
Array [ false, false, false, false ]
global_flag_carry
true



///////

set_flag('c',true)
get_flag('c')
four_bit_full_adder_with_carry( [false,false,false,false], [false,false,false,false] )

// For testing memory
function   print_memory(){
   document.write("<table>");
   for( var i = 0 ; i < memory.lenght ; i++){
      document.write("<tr>");
      for( var j = 0; j< memory[i].lenght ; j++){
         document.write(memory[i][j]);   
      }
      document.write("</tr>");   
   }

   document.write("</table>");
}


get_memory(1) + "   " + get_memory(0);


// Now that we changed memory, test everything again.
// Full adder, this should come out

Adder             Out      Carry    check
full_adder(0,0)   0        0        ok
full_adder(0,1)   1        0        ok
full_adder(1,0)   1        0        ok
full_adder(1,1)   0        1        ok

set_flag('c', false)
full_adder(1,1);
get_flag('c')

// Multibit HDL is messy due to memory changes, let's do that again.
// Now it makes more sense. German radio sounds wierd by the way.

// Test increment_program_counter, 0000 => 0001 => 0010 ok
//0F => 10 => 11 ok
set_memory(1,[1,1,1,1]);

// FF => 00 ?
set_memory(0,[1,1,1,1]);
set_memory(1,[1,1,1,0]);

// Wtf =D
true,true,true,true   true,true,true,true
true,true,true,false   false,false,false,false

FF +1 = E0...

// "Hier ist antenne düssendorf" =D. Wierd when someone talks to you and 
// you understand only couple of words. Makes you feel dizzy.
// This project is starting to be my "dear diary".

set_flag('c',true)
set_flag('a',true)
four_bit_full_adder( [0,0,0,0] , [0,0,0,0] ); // 0001 ok.

set_flag('c',true)
set_flag('a',true)
four_bit_full_adder( [0,0,0,0] , [1,1,1,1] ); // 1110 ? This is this mistake.

set_flag('c',true)
set_flag('a',true)
four_bit_full_adder( [0,0,1,0] , [1,1,1,0] );

four_bit_full_adder( [0,0,1,0] , [1,1,1,0] ); // 0000 ok.

set_flag('c',true)
set_flag('a',true)
four_bit_full_adder( [0,0,1,0] , [1,1,1,0] ); // 0001 ok?

// So lsb 1+1 and the carry 1 makes this?

set_flag('c', true)
undefined
full_adder(1,1)
true
get_flag('c')
true
// Nope, it's fine.

a = [1,1,1,1]
b = [1,1,1,1]
or(and(full_adder(a[3] , b[3]) ,     get_flag('a')),and(half_adder(a[3] , b[3]) , not(get_flag('a'))))
full_adder(a[2] , b[2]) , 
full_adder(a[1] , b[1]) , 
full_adder(a[0] , b[0])  
                       
// Ok, so my 2-bit selector has full_adder that changes a and c flags before the other gets executed?

set_memory(0,[1,1,1,1]);
set_memory(1,[1,1,1,0]);
increment_program_counter()  // FF +1 = FE O_O

set_memory(0,[1,1,1,1]);
set_memory(1,[1,1,1,0]);
increment_program_counter() // Ok

// So error was again the way javascript is not parallel as hardware.
// It's hard to get it right ;)

//////////////////////

// line 520. When we hit 1000 it's time to move to new file.

// So. is as in instruction set, is_put to test.
set_memory(r0_addr, [0,1,0,1])
is_put( [0,0,0,0], [ 1,1,0,0] );
is_put( [0,0,0,0], [ 1,1,0,1] );
is_put( [0,0,0,0], [ 1,1,1,0] );
is_put( [0,0,0,0], [ 1,1,1,1] );


// "Antenne bayern 80er Kulthits", nice station =D

//value error... is_put
set_memory( get_memory[ memory_address([0,0,0,0],[1,1,0,0])], r0_addr);

memory_address([0,0,0,0],[1,1,0,0])
"NaN1,1,0,0"
// Goddamit batman, go away. Oh! I try to multiply array of bools, 
// Sorry javascript! I didn't mean it =(
// This needs converter functions. Let's copy them from other repo, I made
// them somehow before.

_to_dec([1,1,1,1])  
_to_bin(_to_dec([1,1,1,1])) // every value works, awesome

// Awesome, that I didn't have to think the logic again. Thanks me from the past!


_to_dec([0,0,0,0])*16+ _to_dec([0,1,0,1]);   

// Back from debugging to testing.

memory_address([0,0,0,0],[1,1,0,0]) 
"0,0,0,01,1,0,0" //  sooo... what? Oh yeah, javascript don't like the plus.
// a+b is +a + +b in javascript, ofcourse x)

memory_address([1,1,1,1],[1,1,1,1])  // 0-255 ok.

get_memory( memory_address([0,0,0,0],[1,1,0,0]))

////

addr1 = [0,0,0,0]
addr2 = [1,1,0,0]
set_memory( _to_dec(get_memory( memory_address(addr1,addr2))) , get_memory(r0_addr));
_to_dec(get_memory( memory_address(addr1,addr2)))
get_memory( memory_address(addr1,addr2)) // [ false, fals...] ok.
memory_address(addr1,addr2) // 12 ok

// Ok, let's step back. 
// Put r0 to address. set_memory(addr, value). Value is 
set_memory(memory_address(addr1,addr2)[0] , get_memory(r0_addr)[0])
memory_address(addr1,addr2)[1] = get_memory(r0_addr)[1]
memory_address(addr1,addr2)[2] = get_memory(r0_addr)[2]
memory_address(addr1,addr2)[3] = get_memory(r0_addr)[3]

// so like
set_memory(memory_address(addr1,addr2) , get_memory(r0_addr))

set_memory(r0_addr, [0,1,0,1])
is_put( [0,0,0,0], [ 1,1,0,0] );
is_put( [0,0,0,0], [ 1,1,0,1] );
is_put( [0,0,0,0], [ 1,1,1,0] );
is_put( [0,0,0,0], [ 1,1,1,1] );

// Put works.
// Get.

// memory(5) = 8+2 = 10 (= a)
get_memory(r0_addr)
set_memory([0,1,0,1] , [1,0,1,0])
is_get([0,0,0,0], [0,1,0,1]) // page 0 place 5
get_memory(r0_addr)

addr1 = [0,0,0,0]
addr2 = [0,1,0,1]
set_memory( r0_addr  , get_memory( memory_address(addr1,addr2)) );
set_memory(     9    , 

//get tests

get_memory(r0_addr)

set_memory( 5 , [0,1,1,0])
is_get([0,0,0,0],[0,1,0,1])  
get_memory(r0_addr)  // r0 = 0110, ok!

set_memory( 6 , [0,1,1,1])
is_get([0,0,0,0],[0,1,1,0])
get_memory(r0_addr) // r0 = 0111

set_memory( 7 , [1,0,0,0])
is_get([0,0,0,0],[0,1,1,1])
get_memory(r0_addr) // r0 = 1000 ok, get works.

// Crr

set_memory(r0_addr , [0,1,0,1]);
is_crr(1,0);
get_memory(r0_addr+1 );
is_crr(5,0);
get_memory(r0_addr+1 );  // Crr ok.


// LDR 

is_ldr( 0 , 12)
undefined
get_memory(r0_addr)
Array [ 1, 1, 0, 0 ]
is_ldr( 1 , 12)
undefined
get_memory(r0_addr)
Array [ 1, 1, 0, 0 ]
get_memory(r0_addr+1)
Array [ 1, 1, 0, 0 ]
get_memory(r0_addr+2)
Array [ false, false, false, false ]  // ok


// And

set_memory(8 , [0,0,1,1] )
set_memory(9 , [0,1,0,1] )
is_and(8,9)
get_memory(r0_addr)
Array [ false, false, false, true ]  // and works

//  Or

set_memory(8 , [0,0,1,1] )
set_memory(9 , [0,1,0,1] )
is_lor(8,9)
get_memory(r0_addr)
Array [ false, true, true, true ] // or works


// Xor

set_memory(8 , [0,0,1,1] )
set_memory(9 , [0,1,0,1] )
is_xor(8,9)
get_memory(r0_addr)
Array [ false, true, true, false ] // Xor works

// Not

set_memory(8 , [0,0,1,1] )
is_not(8)
get_memory(r0_addr)
Array [ true, true, false, false ] // Not works

// Shifts...

// Assing-matrix or this?
_to_bin(_to_dec([0,0,0,1]) << 1)
Array [ 0, 0, 1, 0 ]

set_memory(r0_addr, [0,1,0,1])
is_lsh(0,1)
get_memory(r0_addr)  // 0101

set_memory(r0_addr, [0,0,0,1])
is_lsh(r0_addr,3)
get_memory(r0_addr)  // 1000, left ok.

set_memory(r0_addr, [1,0,0,0])
is_rsh(r0_addr,3)
get_memory(r0_addr) // shifts ok


// 2n complement

set_memory(r0_addr,[0,0,1,0])
from = to = 0


function is_neg(from, to){
   var tmp = get_memory(+r0_addr + +from);
   tmp = [ not(tmp[0]) , not(tmp[1]) , not(tmp[2]) , not(tmp[3]) ];
   tmp = [ full_adder(tmp[3] , 1) , 
           full_adder(tmp[2] , 0) , 
           full_adder(tmp[1] , 0) , 
           full_adder(tmp[0] , 0) ].reverse(); 
   set_memory( +r0_addr + +to  , tmp  );
}

get_memory(r0_addr)
Array [ true, true, true, false ]  // works
